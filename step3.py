# -*- coding: utf-8 -*-
"""step3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QEM4CwFKVRVHV7gYH3d-6j3NR38GnQ7g
"""

!pip install clearml timm torch torchvision

import os
from clearml import Task, Dataset

# ClearML credentials
os.environ["CLEARML_API_ACCESS_KEY"] = "91A7AJN241YMJXE40LLNSX198E0JK4"
os.environ["CLEARML_API_SECRET_KEY"] = "m4S8vxmP0P5m3EZAZ_0IO6t1_5L2rz15bCyxYc5VS0kcQxlb4wUH2NLDzHT9kEus_z4"
os.environ["CLEARML_API_HOST"] = "https://api.clear.ml"
os.environ["CLEARML_WEB_HOST"] = "https://app.clear.ml"
os.environ["CLEARML_FILES_HOST"] = "https://files.clear.ml"

task = Task.init(
    project_name="plantdataset",
    task_name="Step 3 - Hybrid Model Debug Training",
    task_type=Task.TaskTypes.training
)

from torchvision import datasets, transforms
from torch.utils.data import DataLoader, random_split

# Load dataset uploaded in Step 1
dataset = Dataset.get(dataset_id="105163c10d0a4bbaa06055807084ec71")
dataset_path = dataset.get_local_copy()
train_dir = os.path.join(dataset_path, "train")

# Apply the same transforms as Step 2
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# Load and split dataset
full_dataset = datasets.ImageFolder(train_dir, transform=transform)
train_size = int(0.8 * len(full_dataset))
val_size = len(full_dataset) - train_size
train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16)

from torchvision import datasets, transforms
from torch.utils.data import DataLoader, random_split

# Load dataset uploaded in Step 1
dataset = Dataset.get(dataset_id="105163c10d0a4bbaa06055807084ec71")
dataset_path = dataset.get_local_copy()
train_dir = os.path.join(dataset_path, "train")

# Apply the same transforms as Step 2
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# Load and split dataset
full_dataset = datasets.ImageFolder(train_dir, transform=transform)
train_size = int(0.8 * len(full_dataset))
val_size = len(full_dataset) - train_size
train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16)

import torch
import torch.nn as nn
import timm

class HybridEnsemble(nn.Module):
    def __init__(self, num_classes):
        super(HybridEnsemble, self).__init__()
        self.model1 = timm.create_model('densenet121', pretrained=True, num_classes=num_classes)
        self.model2 = timm.create_model('mobilenetv2_100', pretrained=True, num_classes=num_classes)
        self.fc = nn.Linear(num_classes * 2, num_classes)

    def forward(self, x):
        out1 = self.model1(x)
        out2 = self.model2(x)
        combined = torch.cat((out1, out2), dim=1)
        return self.fc(combined)

import torch.nn.functional as F

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = HybridEnsemble(num_classes=len(full_dataset.classes)).to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Run for 2 epochs for test
for epoch in range(1, 3):
    model.train()
    total_loss = 0
    print(f"\nüîÅ Starting Epoch {epoch}")

    for batch_idx, (inputs, labels) in enumerate(train_loader):
        inputs, labels = inputs.to(device), labels.to(device)
        print(f"üöö Batch {batch_idx+1}/{len(train_loader)}")

        optimizer.zero_grad()

        try:
            outputs = model(inputs)
            print("‚úÖ Forward pass done")
        except Exception as e:
            print(f"‚ùå Error in forward pass: {e}")
            break

        try:
            loss = criterion(outputs, labels)
            print(f"üìâ Loss: {loss.item():.4f}")
        except Exception as e:
            print(f"‚ùå Error calculating loss: {e}")
            break

        try:
            loss.backward()
            print("üì¶ Backward pass done")
        except Exception as e:
            print(f"‚ùå Error during backward(): {e}")
            break

        optimizer.step()
        total_loss += loss.item()

    print(f"üéØ Epoch {epoch} done. Total Loss: {total_loss:.4f}")

model_path = "hybrid_model.pth"
torch.save(model.state_dict(), model_path)
task.upload_artifact("hybrid_model", model_path)
print("‚úÖ Model saved and uploaded to ClearML.")

task.close()